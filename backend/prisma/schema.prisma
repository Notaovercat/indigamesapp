generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  user
  admin
}

enum STATUS {
  InDevelopment
  EarlyAccess
  Released
  NonProvided
}

model User {
  id          String       @id @default(uuid())
  username    String       @unique
  email       String       @unique
  password    String
  description String?
  role        ROLE         @default(user)
  team        Team[]
  teamMemeber TeamMember[]
  comments    Comment[]
  ratedGames  Rating[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Team {
  id           String       @id @default(uuid())
  author       User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String
  team_members TeamMember[]
  game         Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId       String       @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([gameId])
}

model TeamMember {
  id        String   @id @default(uuid())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model Game {
  id          String       @id @default(uuid())
  title       String       @unique
  description String
  status      STATUS       @default(NonProvided)
  rating      Float        @default(0)
  views_count Int          @default(0)
  isFeatured  Boolean      @default(false)
  isVisible   Boolean      @default(false)
  team        Team?
  coverImage  CoverImage?
  platforms   Platform[]
  genres      Genre[]
  tags        Tag[]
  file        File?
  screenshots Screenshot[]
  comments    Comment[]
  rated       Rating[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Rating {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String

  rate Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Platform {
  id String @id @default(uuid())

  name  String @unique
  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id String @id @default(uuid())

  name  String @unique
  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id String @id @default(uuid())

  name  String @unique
  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id String @id @default(uuid())

  url String @unique

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Screenshot {
  id String @id @default(uuid())

  name String @unique

  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  gameId    String
}

model CoverImage {
  id String @id @default(uuid())

  name String @unique

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())

  content    String
  isRedacted Boolean @default(false)
  isDeleted  Boolean @default(false)

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
