// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  user
  admin
}

enum STATUS {
  InDevelopment
  EarlyAccess
  Released
  NonProvided
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String
  role     ROLE   @default(user)

  team        Team[]
  teamMemeber TeamMember[]

  comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String @unique

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  team_members TeamMember[]

  updatedAt DateTime @updatedAt

  @@index([gameId])
}

model TeamMember {
  id String @id @default(uuid())

  team   Team   @relation(fields: [teamId], references: [id])
  teamId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  role String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model Game {
  id String @id @default(uuid())

  title       String @unique
  description String
  status      STATUS @default(NonProvided)
  rating      Float  @default(0)
  views_count Int    @default(0)

  isFeatured Boolean @default(false)
  isVisible  Boolean @default(false)

  team        Team?
  platforms   Platform[]
  genres      Genre[]
  tags        Tag[]
  file        File?
  cover_image Image?     @relation("cover")
  screenshots Image[]    @relation("screenshots")
  comments    Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Platform {
  id String @id @default(uuid())

  name  String @unique
  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id String @id @default(uuid())

  name  String @unique
  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Genre {
  id String @id @default(uuid())

  name  String @unique
  games Game[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id String @id @default(uuid())

  url String @unique

  game   Game   @relation(fields: [gameId], references: [id], onDelete: Cascade)
  gameId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id String @id @default(uuid())

  url String @unique

  games_cover       Game   @relation("cover", fields: [gameId], references: [id], onDelete: Cascade)
  gameId            String @unique
  games_screenshots Game[] @relation("screenshots")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(uuid())

  content    String
  isRedacted Boolean @default(false)
  isDeleted  Boolean @default(false)

  game   Game?   @relation(fields: [gameId], references: [id])
  gameId String?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
